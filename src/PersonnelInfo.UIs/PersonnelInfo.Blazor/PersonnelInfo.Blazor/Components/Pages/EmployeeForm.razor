@page "/employee-form"
@rendermode InteractiveServer
@inject HttpClient Http



<EditForm Model=Employee OnValidSubmit=HandleValidSubmit FormName=AddEmployeeForm>
@*     <DataAnnotationsValidator /> *@
@*     <ValidationSummary /> *@

    <div class="form-group">
        <label for="PersonnelCode">Personnel Code:</label>
        <InputNumber id="PersonnelCode" @bind-Value=Employee.PersonnelCode class="form-control" />
    </div>
    <div class="form-group">
        <label for="FirstName">First Name:</label>
        <InputText id="FirstName" @bind-Value=Employee.FirstName class="form-control" />
    </div>
    <div class="form-group">
        <label for="LastName">Last Name:</label>
        <InputText id="LastName" @bind-Value=Employee.LastName class="form-control" />
    </div>
    <div class="form-group">
        <label for="NationalId">National ID:</label>
        <InputText id="NationalId" @bind-Value=Employee.NationalId class="form-control" />
    </div>
    <div class="form-group">
        <label for="ContactNumber">Contact Number:</label>
        <InputText id="ContactNumber" @bind-Value=Employee.ContactNumber class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary" disabled=@IsSubmitting>
        @(IsSubmitting ? "Submitting..." : "Add Employee")
    </button>
</EditForm>

@if (SuccessMessage != null)
{
    <p class="text-success">@SuccessMessage</p>
}

@if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    [SupplyParameterFromForm]
    public AddEmployeeDto Employee { get; set; }

    private string? SuccessMessage;
    private string? ErrorMessage;
    private bool IsSubmitting;

    protected override void OnInitialized()
    {
        Employee = new AddEmployeeDto
            {
                
                
                    // Basic Information
                    PersonnelCode = 0,
                    FirstName = string.Empty,
                    LastName = string.Empty,
                    NationalId = string.Empty,
                    ContactNumber = string.Empty,

                    // Gender and Status
               

                    // Family Information
                    FatherName = string.Empty,
          

                    // Identity Information
                    ShenasnameNumber = string.Empty,
                    ShenasnameSerialLetter = string.Empty,
                    ShenasnameSerie = string.Empty,
                    ShenasnameSerial = string.Empty,

                    // Birth and Place Information
                    BirthDate = DateTime.Now,
                    BirthPlaceId = null,

                    // Shenasname Issuance Information
                    ShenasnameIssuedPlaceId = null,

                    // Insurance Information
                    InsurranceCode = string.Empty,
                    InsurranceStatus = string.Empty,
                    HasInsurance = null,
                 

                    // Employment Information
                    DepartmentId = null,
                    LeavingDate = DateTime.Now,
                    SupervisorId = 0,

                    // Contact Information
                    InternalContactNumber = string.Empty,
                    LandPhoneNumber = string.Empty,
                    Address = string.Empty,
                    PostalCode = string.Empty,

                    // Academic Information
                    MostRecentDegree = string.Empty,
                    Major = string.Empty
                

            };
    }

    private async Task HandleValidSubmit()
    {
        IsSubmitting = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/Employee/Add", Employee);
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Employee added successfully.";
                ErrorMessage = null;
                Employee = new AddEmployeeDto();
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ErrorMessage = error?.Message ?? "Failed to add the employee.";
                SuccessMessage = null;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            SuccessMessage = null;
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    public class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}
